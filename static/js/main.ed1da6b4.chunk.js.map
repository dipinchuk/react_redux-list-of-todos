{"version":3,"sources":["types/Select.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","api.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Select","actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","All","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","filteredTodos","selectedTodo","dispatch","className","map","id","completed","classNames","title","onClick","currentTodoActions","setSelectedTodo","TodoFilter","setQuery","q","filterActions","selectedCategory","value","onChange","event","category","target","Active","Completed","placeholder","style","pointerEvents","Loader","TodoModal","hasSelectedTodo","useState","user","setUser","useEffect","userId","catch","href","email","name","App","useMemo","normalizedQuery","toLowerCase","includes","filterTodos","todosActions","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ed1da6b4.chunk.js","sourcesContent":["export enum Select {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Select } from '../types/Select';\n\ntype RemoveQueryAction = { type: 'filter/REMOVE' };\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Select;\n};\n\nconst removeQuery = (): RemoveQueryAction => ({ type: 'filter/REMOVE' });\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Select): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, removeQuery, setStatus };\n\ntype State = {\n  query: string,\n  status: Select,\n};\n\ntype Action = SetQueryAction | RemoveQueryAction | SetStatusAction;\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: Select.All,\n  },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    case 'filter/REMOVE':\n      return { ...state, query: '' };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  filteredTodos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = (\n  { filteredTodos },\n) => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const setSelectedTodo = (todo: Todo) => dispatch(currentTodoActions.setTodo(todo));\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          filteredTodos.map(todo => {\n            return (\n              <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={classNames(\n                    todo.completed ? 'has-text-success' : 'has-text-danger',\n                  )}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => setSelectedTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames(\n                        selectedTodo?.id !== todo.id\n                          ? 'far fa-eye'\n                          : 'far fa-eye-slash',\n                      )}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable max-len */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { ChangeEvent } from 'react';\nimport { Select } from '../../types/Select';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const query = useAppSelector(state => state.filter.query);\n  const setQuery = (q: string) => dispatch(filterActions.setQuery(q));\n\n  const selectedCategory = useAppSelector(state => state.filter.status);\n  const setSelectedCategory = (category: Select) => dispatch(filterActions.setStatus(category));\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSelectChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedCategory(event.target.value as Select);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedCategory}\n            onChange={handleSelectChange}\n          >\n            <option value={`${Select.All}`}>\n              All\n            </option>\n            <option value={`${Select.Active}`}>\n              Active\n            </option>\n            <option value={`${Select.Completed}`}>\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {\n          query && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => setQuery('')}\n              />\n            </span>\n          )\n        }\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const removeSelectedTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  const hasSelectedTodo = selectedTodo !== null;\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    if (selectedTodo !== null) {\n      getUser(selectedTodo.userId)\n        .then(setUser)\n        .catch(() => { });\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => removeSelectedTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {hasSelectedTodo && (\n                selectedTodo.title\n              )}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed && (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n\n              {!selectedTodo?.completed && (\n                <strong className=\"has-text-danger\">Planned</strong>\n\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/quotes */\n/* eslint-disable max-len */\nimport React, { useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from \"./api\";\nimport { TodoList } from \"./components/TodoList\";\nimport { TodoFilter } from \"./components/TodoFilter\";\nimport { TodoModal } from \"./components/TodoModal\";\nimport { Loader } from \"./components/Loader\";\nimport { Todo } from \"./types/Todo\";\nimport { Select } from \"./types/Select\";\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nconst filterTodos = (todos: Todo[], query: string, selectedCategory: Select) => {\n  let filteredTodos = [...todos];\n  const normalizedQuery = query.toLowerCase();\n\n  switch (selectedCategory) {\n    case Select.Completed:\n      filteredTodos = filteredTodos.filter((todo: Todo) => todo.completed);\n      break;\n    case Select.Active:\n      filteredTodos = filteredTodos.filter((todo: Todo) => !todo.completed);\n      break;\n    default:\n      break;\n  }\n\n  if (query) {\n    filteredTodos = filteredTodos\n      .filter((todo: Todo) => todo.title.toLowerCase()\n        .includes(normalizedQuery));\n  }\n\n  return filteredTodos;\n};\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n  const setTodos = (td: Todo[]) => dispatch(todosActions.setTodos(td));\n\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const query = useAppSelector(state => state.filter.query);\n\n  const selectedCategory = useAppSelector(state => state.filter.status);\n\n  const filteredTodos = useMemo(\n    () => filterTodos(todos, query, selectedCategory),\n    [query, selectedCategory, todos],\n  );\n\n  useEffect(() => {\n    getTodos()\n      .then((res) => {\n        setTodos(res);\n      })\n      .catch(() => { });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  filteredTodos={filteredTodos}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}